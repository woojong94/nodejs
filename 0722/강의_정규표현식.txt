정규표현식
	패턴으로 문자열을 찾거나, 변경
	
	RegExp 생성자
	new RegExp
	
	/패턴/ -> 정규표현식 객체 생성
	((((    /apple/ --> 정규표현식 객체		)))))
		.test(패턴을 체크할 문자열)
			- 패턴의 일치 여부(true, false)
		.exec(패턴을 체크할 문자열)
			- 패턴에 일치하는 문자열을 추출
			
	/문자열/ -> 문자열이 포함되는 패턴

		ex1)
		const a = 'I am a boy';
		->
		/boy/.test(a);
		-> ture

	[abc]	-> 문자 클래스 -> a,b,c 문자 각각 중에 한개
	[0-9]	-> 범위(0123456789) -> 숫자인 것
				\d -> [0-9] 동일 -> 숫자인 패턴
				\D -> [^0-9] 동일 -> 숫자가 아닌 패턴
	[a-z]	-> abcdefg...z
	[A-Z]	-> ABXDEFG...Z		// 대소문자 구분된다
			예1) 입력받은 데이터가 반드시 숫자인 경우
				-> 숫자가 아닌 문자가 있는지
				[^0-9]-> 숫자가 아닌 문자가 포함되어있으면 true
				-> true 검증 실패
			예2)
				const a = 'abcd123';
				->
				if (/[^0-9]/.test(a)) {
					console.log('검증 실패 - 숫자 외 문자가 있음');
				} else {
					console.log('검증 성공 - 숫자만 있음');
				}
				->
				검증 실패 - 숫자 외 문자가 있음
				
								.
	[^a-z]	-> a~z가 아닌 문자 	// ^ -> 부정(반대)
								//	 문자 클래스 [] 외부에서 ^ -> 시작하는 문자
								//	 /^abc/ -> abc로 시작하는 문자
	숫자, 공백
		\d -> [0-9] -> 숫자	( /\d/ )
		\D -> [^0-9] -> 숫자가 아닌 문자
		
		\s -> 공백 1개					\ -> 역슬래시
		\S -> 공백이 아닌 문자 1개 			//대부분 대문자는 소문자와 반대 의미를 가짐
		
		
		단어(알파벳, 숫자, 언더스코어(_))
			\w --> 단어 패턴 [a-zA-Z0-9_]
			\W --> 단어 패턴이 아닌 문자
			
			. -> 문자 1개(줄바꿈 문자(\n)을 제외한)
			
		패턴의 반복 범위
		x{2, 4}	-> x가 2이상 4 이하 반복 , x가 2개, 3개, 4개
		x{2}		-> x가 2번 반복
		x{2,}		-> x가 2번 이상 반복
		x{,4}		-> x가 4번 미만 반복(없을 수도 있음)
		x?			-> x{0,1} -> 0이상 1이하 -> x가 있어도되고 없어도되는 패턴
		x+			-> x{1,}	-> 1이상 반복	(반드시 1개는 있어야됨)
		x*			-> x{0,}	-> 0이상 반복	(없어도 되고 있어도 됨, 여러번 반복해도 됨)
참고) 패턴에서 사용되는 특수문자를 패턴으로 사용할 경우 역슬래시(\)
예) [] -> 문자클래스 					\[abc\]			\[?abc\]	\*

			ex1)
			const a = '01abc';
			->
			/[0-9]{2,3}/.test(a);
			-> true
			
			ex2)
			const phone = '010-2243-7147';
			->
			/[\d]{3}-[\d]{3,4}-[\d]{4}/.test(phone);
			-> true
			
		/^단어/ -> 단어로 시작하는 패턴
		/단어$/ -> 단어로 끝나는 패턴
			[속성명$='단어'] 
			
		| -> OR 여러개 중 하나의 패턴에 일치하는지
		/단어1|단어2|단어3/ -> 단어1, 단어2, 단어3 중에 하나		
		
		(패턴) -> 서브패턴		// 중요
					-> 1) 특정 패턴을 분리하여 문자열 치환
							replace
							예)
							const birthDay = '1994년 12월 5일'; // 1994/12/5
							->
							const pattern = /([\d]{4})\D+([\d]{1,2})\D+([\d]{1,2})/
							->
							const data = pattern.exec(birthDay);
							->
							const newBirthDay = data[0].replace(pattern, '$1/$2/$3');
							->
							newBirthDay;
							->"1994/12/5"
							
					-> 2) 특정 패턴의 문자열만 별도로 추출(이미지에서 src 속성에있는 경로만 가져올 때)
							2-1) 네이버 메인페이지 -> 이미지의 경로
								<img src="경로">
								
								<img src='경로'>
								<img src=경로>
								<IMG SRC=...>
								<IMG class='...' id='...' src=''>
								<img class='...' id='...' src='' width='...' alt='...'>
								-->
								/<img\s+\S*src=["']?([^"'>]+)["']?[^>]*/igm;
								
								exec -> 실행될 때마다 다음 찾는 위치로 이동하면서 데이터를 추출
											1번 실행시 데이터는 1번
												-> 마지막 위치 -> null 반환
												
												false가 되는 경우 -> 0, '', null, undrfined
												
												-> 전부 추출 -> 반복문을 사용하여 추출
												예) img 태그의 src 속성의 이미지 URL 전부 추출
													-> 이미지_전부_추출.txt
		플래그
			/패턴/플래그
			i	- 	case-insensitive -> [a-ZA-Z]	-> 대소문자 구분없이 체크하기 [a-ZA-Z] --> /[a-z]/i
			g	-	global -> 전역 체크
						str.replace(/little/g, 'big'); 
			m -	여러줄 모드로 검색	( 줄개행 문자도 체크)
					ex)
						<img src=""
							class= ......
						/>
								
								
		