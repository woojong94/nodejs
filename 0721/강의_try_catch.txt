try _ catch
	1. 소스 상에서 예상되는 오류가 있을 때
	2. 예상되는 오류가 발생한 경우 후속 처리를 위해서 미리 정의해 놓는 구문
	
		- 서비스가 되고있는 웹사이트
	
	try {
		// 오류가 예상되는 구간
		
		// 오류가 발생하거나 또는 발생시키면 catch로 유입
		throw Error 객체
	} catch (err) {
		// 오류가 발생하면(throw 에러 객체) 유입
		// 오류에 대한 후속 처리
	}
	
		ex)
		try {
			const num = 9;
			if (num % 2 == 1) { // 홀수일때 오류 발생
				throw '짝수만 가능합니다.';   
			}
		} catch (err) {
			console.error(err);
		}
		--> 짝수만 가능합니다. 
		
	
	Error 생성자 -> 생성해서 throw
		.message 	-> new Error('오류메시지')
		.stack		-> 오류가 발생한 상세 정보
		
			ex)
			try {
				const num = 9;
				if (num % 2 == 1) { // 홀수일때 오류 발생
					throw new Error('짝수만 입력 가능합니다.');  
				}
			} catch (err) {
				console.error(err. message);    // Error 생성자 인수로 넘긴 오류 메세지
				console.error(err. stack);     // Error가 발생한 상세 정보
			}
				// stack은 브라우저 콘솔에서 안뜸, 노드에서 나올듯
		

		
		finally		-> 오류가 발생하든 안하든 무조건 실행되는 영역
		try {
			// 오류 발생이 예상되는 부분
		} catch (err) {
			// 오류가 발생(throw)하면 유입되는 부분
		} finally {
			// 오류 발생 관계없이 무조건 실행되는 부분
			// 로그 기록할 때 자주 사용
		}
		
			ex)
			try {
				const num = 9;
				if (num % 2 == 1) { // 홀수일때 오류 발생
					throw new Error('짝수만 입력 가능합니다.');  
				}
			} catch (err) {
				console.error(err. message);    // Error 생성자 인수로 넘긴 오류 메세지
			} finally {
				console.log('무조건 실행')
			}
			
			ex1)
			function checkEvenNum(num) {
				try {
				   if (num % 2 == 1) {
						throw new Error('짝수가 아닙니다.'); 
				   }
				} catch (err) {
					console.error(err.message);
					return false;
				}
				  return true;
					console.log('반환 완료');
			}
				--> return이 나오면 하단부 실행 안됨
			ex2)
			function testFunc() {
				const num = 10;
				if (num % 2 == 0) { // 짝수면 실행을 정지
					return; // return 이후는 실행이 안됨
				}

				/** 홀수를 처리하는 부분 */   
				console.log('홀수를 처리한다.....');
			}